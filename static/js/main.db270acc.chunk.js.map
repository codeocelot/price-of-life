{"version":3,"sources":["InputItem.tsx","Form.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["InputItem","props","onChange","value","setVal","field","Item","label","span","min","max","step","val","defaultValue","marks","formatter","toString","numberFormat","parseInt","toFixed","replace","parser","size","defaultProps","defaultState","livesSaved","priceOfLife","budget","layout","labelCol","wrapperCol","reducer","state","action","payload","type","Error","useReducer","dispatch","useCallback","reset","onClick","Header","Layout","Content","Footer","App","className","style","padding","Form","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.db270acc.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport {Form, Slider, InputNumber, Row, Col} from 'antd';\n\ntype Props = {\n  label: string;\n  min: number;\n  max: number;\n  val: number;\n  step: number;\n  marks: {[k: number]: string};\n  field: string;\n  numberFormat: string;\n  setVal: (field: string, value: number) => void;\n}\n\nexport default function InputItem(props: Props) {\n  function onChange(value: number | string | undefined) {\n    if (typeof value == 'undefined' || typeof value == 'string') {\n      return;\n    }\n    props.setVal(props.field, value);\n  }\n  return (\n    \n    <Form.Item label={props.label}>\n      <Row>\n        <Col span={24}>\n          <Slider \n            min={props.min}\n            max={props.max}\n            onChange={onChange}\n            step={props.step}\n            value={props.val}\n            defaultValue={props.val}\n            marks={props.marks}\n          />\n        </Col>\n        <Col span={4}>\n          <InputNumber \n            formatter={value => {\n              if (!value) {\n                return '';\n              }\n              if (typeof value === 'number') {\n                value = value.toString();\n              }\n              return `${props.numberFormat} ${parseInt(value, 10).toFixed(0)}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\n            }\n            parser={value => {\n              if (!value) {\n                return '';\n              }\n              return value.replace(/\\$\\s?|(,*)/g, '')\n            }}\n            size=\"large\" onChange={onChange} value={props.val}\n          />\n    \n        </Col>\n\n      </Row>\n    </Form.Item>\n  );\n}\n\nInputItem.defaultProps = {\n  numberFormat: '$',\n  step: 10000,\n  marks: {},\n}","import React, {useState, useCallback, useMemo, useReducer} from \"react\";\nimport { Space, Form, Input, Button } from \"antd\";\nimport InputItem from \"./InputItem\";\n\ntype Props = {};\n\ntype State = {\n  livesSaved: number;\n  priceOfLife: number;\n  budget: number;\n}\n\nconst defaultState: State = {\n  livesSaved: 1000000,\n  priceOfLife: 6000000,\n  budget: 1000000*6000000,\n}\n\nconst layout = {\n  labelCol: { span: 4 },\n  wrapperCol: { span: 16 },\n};\n\ntype Action = {\n  type: string;\n  payload?: any;\n}\n\nfunction reducer(state: State = defaultState, action: Action) {\n  const val = action.payload;\n  switch (action.type) {\n    case 'reset':\n      return defaultState;\n    case 'livesSaved':\n      return {\n        ...state,\n        livesSaved: val,\n        budget: val * state.priceOfLife\n      }\n    case 'priceOfLife':\n      return {\n        ...state,\n        priceOfLife: val,\n        budget: val * state.livesSaved,\n      }\n    case 'budget':\n      return {\n        ...state,\n        priceOfLife: val / state.livesSaved,\n        budget: val,\n      }\n    default:\n      throw new Error();\n\n  }\n}\n\n/*)\nEach life, the emotions and unique experiences that make up each astonishing life, cannot be measured in dollars. That's why so many wonderful people dedicate their lives to advancing the state of health and longevity, including front line healthcare staff who deserve considerable applause for what they experience. The value of life ripples out from there; we spend efforts improving the safety of our cars, the pollution (of many kinds) to our habitats and the quality of our health by continual refinement of the scientific process. Indeed, there are so many competeting priorities, there's always a scarcity of captial to fund all of them.  In precise terms, I'm implying that the marginal change of funding one project is not zero. In laymans terms, if we fund one project, we necessarily take from another, which will yield it's own benefits. Thus, a market for projects, and the capital that funds it, exists, with projects of strong merit (low cost / benefit) generally selected first[0]. For a human life in 2020, it's about $10 million dollars.  The specific value is hard to precisely pin down, and actually and doesn't matter too much, beyond a theoretical value. It's calculated at the margin, when departments like the EPA try to justify additional funds against other priorities, such as the NHTSA.\n\n0: NNT would probably remind me that experts are rarely expert ath their professions, and that Extremistan rules apply.\n*/\n\nexport default function (props: Props) {\n  const [state, dispatch] = useReducer(reducer, defaultState);\n\n  const setVal = useCallback((field: string, val: any) => { dispatch({ type: field, payload: val })}, []);\n  const reset = useCallback(() => dispatch({ type: 'reset' }), []);\n\n  return (\n    <Form {...layout}>\n        <InputItem\n          numberFormat='' \n          label=\"Number Of Lives Saved\" \n          val={state.livesSaved} \n          field=\"livesSaved\" \n          min={0} \n          setVal={setVal} \n          max={10000000}\n        />\n        <InputItem \n        label=\"Price Of Human Life\" \n        val={state.priceOfLife} \n        field='priceOfLife' \n        setVal={setVal}\n        step={100000}\n        min={0} \n        max={100000000}\n        />\n        <InputItem \n          label=\"Buget for Response\" \n          min={0} \n          max={20000000000000} \n          val={state.budget} \n          field='budget' \n          setVal={setVal}\n        />\n        <Button onClick={reset}>Reset</Button>\n        <div>\n          <summary>\n            <details>\n              <p>\n                Each life, the emotions and unique experiences that make up each astonishing life, cannot be measured in dollars. That's why so many wonderful people dedicate their lives to advancing the state of health and longevity, including front line healthcare staff who deserve considerable applause for what they experience. The value of life ripples out from there; we spend efforts improving the safety of our cars, the pollution (of many kinds) to our habitats and the quality of our health by continual refinement of the scientific process. Indeed, there are so many competeting priorities, there's always a scarcity of capital to fund all of them.  In precise terms, I'm implying that the marginal change of funding one project is not zero. In laymans terms, if we fund one project, we necessarily take from another, which will yield it's own benefits. Thus, a market for projects, and the capital that funds it, exists, with projects of strong merit (low cost / benefit) generally selected first[0]. For a human life in 2020, it's about $10 million dollars.  The specific value is hard to precisely pin down, and actually and doesn't matter too much, beyond a theoretical value. It's calculated at the margin, when departments like the EPA try to justify additional funds against other priorities, such as the NHTSA.\n              </p>\n              <ul>\n                <li>\n0: NNT would probably remind me that experts are rarely expert at their professions and thus we do not have an efficient means of distribution.\n                </li>\n              </ul>\n            </details>\n          </summary>\n        </div>\n    </Form>\n  );\n}\n","import React from 'react';\nimport { Layout } from 'antd';\nimport logo from './logo.svg';\n// import './App.css';\nimport Form from './Form';\nimport './App.less';\nconst { Header, Content, Footer } = Layout;\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n      <div>\n        <Layout className=\"layout\">\n          <Header>\n            <div>Header</div>\n          </Header>\n          <Content style={{ padding: '50px' }}>\n            <Form />\n          </Content>\n        </Layout>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}